// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactQuery from "react-query";

function Make(Config) {
  var useQuery = function (queryKey, queryFn, initialData, enabled, retryOnMount, notifyOnChangePropsExclusions, onSuccess, onError, onSettled, select, suspense, keepPreviousData, structuralSharing, useErrorBoundary, param) {
    var tmp = {
      queryKey: queryKey,
      queryFn: queryFn
    };
    if (enabled !== undefined) {
      tmp.enabled = Caml_option.valFromOption(enabled);
    }
    if (retryOnMount !== undefined) {
      tmp.retryOnMount = Caml_option.valFromOption(retryOnMount);
    }
    if (notifyOnChangePropsExclusions !== undefined) {
      tmp.notifyOnChangePropsExclusions = Caml_option.valFromOption(notifyOnChangePropsExclusions);
    }
    if (onSuccess !== undefined) {
      tmp.onSuccess = Caml_option.valFromOption(onSuccess);
    }
    if (onError !== undefined) {
      tmp.onError = Caml_option.valFromOption(onError);
    }
    if (onSettled !== undefined) {
      tmp.onSettled = Caml_option.valFromOption(onSettled);
    }
    if (select !== undefined) {
      tmp.select = Caml_option.valFromOption(select);
    }
    if (suspense !== undefined) {
      tmp.suspense = Caml_option.valFromOption(suspense);
    }
    if (keepPreviousData !== undefined) {
      tmp.keepPreviousData = Caml_option.valFromOption(keepPreviousData);
    }
    if (structuralSharing !== undefined) {
      tmp.structuralSharing = Caml_option.valFromOption(structuralSharing);
    }
    if (useErrorBoundary !== undefined) {
      tmp.useErrorBoundary = Caml_option.valFromOption(useErrorBoundary);
    }
    if (initialData !== undefined) {
      tmp.initialData = Caml_option.valFromOption(initialData);
    }
    var result = ReactQuery.useQuery(tmp);
    var match = result.status;
    var queryResult;
    if (match === "error") {
      queryResult = {
        TAG: /* Error */2,
        _0: result.error
      };
    } else if (match === "loading") {
      queryResult = /* Loading */0;
    } else if (match === "initialData") {
      queryResult = /* InitialData */2;
    } else if (match === "success") {
      var value = Curry._1(Config.decoder, result.data);
      queryResult = value.TAG === /* Ok */0 ? ({
            TAG: /* Success */1,
            _0: value._0
          }) : ({
            TAG: /* DecodeError */0,
            _0: value._0
          });
    } else {
      queryResult = /* Idle */1;
    }
    return [
            queryResult,
            result
          ];
  };
  return {
          useQuery: useQuery
        };
}

var $$Promise;

export {
  $$Promise ,
  Make ,
  
}
/* react-query Not a pure module */
